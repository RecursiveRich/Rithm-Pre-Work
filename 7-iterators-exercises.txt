Iterators Exercises


// Write a function called printFirstAndLast which accepts an array (of objects) and console.logs a new string with the first character and the last character of each value.
function printFirstAndLast(arr){
        arr.forEach(function(str, index, arr){
                console.log( str[0] + str[str.length-1]);
    })
}


// Write a function called addKeyAndValue which accepts three parameters, an array (of objects), a key and a value. This function should return the array of objects after each key and value have been added to each object in the array.


function addKeyAndValue(arr, key, val){
        arr.forEach(function(obj, index, arr){
                obj[key] = val;
        })
        return arr;
}


Write a function called valTimesIndex which accepts an array of numbers and returns a new array with each value multiplied by the index it is at in the array:


 function valTimesIndex(arr){
        return arr.map(function(val, index, arr){
                return val*index;
        });
}


Write a function called extractKey which accepts two parameters, an array of objects, and the name of a key and returns an array with just the values for that key:


function extractKey(arr, key){
        return arr.map(function(obj,index,arr){
                                return obj[key];
                        })
}


Write a function called filterLetters which accepts an array of letters and returns the number of occurrences of a specific letter. This function should be case insensitive


function filterLetters(arr, ltr){
        return arr.filter(function(val, index, arr){
                                        return ltr.toLowerCase() === val.toLowerCase();
                                }).length;        
}




Write a function called filterKey which accepts two parameters, an array of objects, and the name of a key and returns an array with only those objects which have truthy values for that key:


function filterKey(arr, key) {
        return arr.filter(function(val, index, arr){
                                return val[key];
                        })
}


Write a function called extractKey which accepts two parameters, an array of objects, and the name of a key and returns an array with just the values for that key:


function extractKey(arr, key){
        return arr.reduce(function(acc,val,index,arr){
                                acc[index] = val[key];
                                return acc;
                        },[])        
}


Write a function called filterLetters which accepts an array of letters and returns the number of occurrences of a specific letter. This function should be case insensitive


function filterLetters(arr, ltr){
        return arr.reduce(function(acc,val, index, arr){
                        if(val.toLowerCase() === ltr.toLowerCase()) return ++acc;
                                        return acc;
                                },0)
}


Write a function called addKeyAndValue which accepts three parameters, an array (of objects), a key and a value. This function should return the array of objects after each key and value has been added. You can do this a few ways, either by reducing starting with an empty array and making copies of the object or by starting with the actual array!


function addKeyAndValue(arr, key, value){
        return arr.reduce(function(acc,obj,index,arr){
                                obj[key] = value;        
                                acc[index] = obj;
                                return acc;
                        },[])
}


PART I


* Write a function called printEmails which console.log's each email for the users.
function printEmails(){
        users.forEach(function(val, index, arr){
                                console.log(val.email);
                        })
}


* Write a function called printHobbies which console.log's each hobby for each user.
function printHobbies(){
        users.forEach(function(val,index,arr){
                        val.hobbies.forEach(function(val, index, arr){
                                        console.log(val);
                                })
                });
}


* Write a function called findHometownByState which returns the first user which has a hometown of the state that is passed in
function findHometownByState(state){
        return users.find(function(val,index,arr){
                        return val.hometown.state === state;
                })
}




* Write a function called allLanguages which returns an array of all of the unique values

function allLanguages(){
        var newArr = [];
        users.forEach(function(val){
                        val.favoriteLanguages.forEach(function(val,index, arr){
                                        if ( newArr.indexOf(val) === -1 ) {
                                                newArr.push(val);
                                        } 
                                })
                })
        return newArr;
}


* Write a function called hasFavoriteEditor which returns a boolean if any of the users have the editor passed in


function hasFavoriteEditor(editor){
        return users.some(function(val, index, arr){
                        return val.favoriteEditor === editor;
                });
}


* Write a function called findByUsername which takes in a string and returns an object in the users array that has that username


function findByUsername(str){
        return users.find(function(obj){
                        return        obj.username === str;
                })
}


PART II


* Write a function called vowelCount that accepts a string and returns an object with each key being the vowel and the value being the number of times the vowel occurs in the string (the order of keys in the object does not matter).


function vowelCount(str){
        return        str.split("")
                        .filter(function(val, index, arr){
                                        return ['a','e','i','o','u'].indexOf(val) !== -1;
                                        })
                        .reduce(function(acc,val,index,arr){
                                        if(!acc[val]) {
                                        acc[val] = 1;
                                                return acc;
                                        }
                                        acc[val]++;
                                        return acc;
                                },{});
}


* Write a function called removeVowels that accepts a string and returns an array of each character that is not a vowel (y should not count as a vowel for this function).
function removeVowels(str){
        return        str.split("")
                        .filter(function(val, index, arr){
                                return ['a','e','i','o','u'].indexOf(val) === -1;
                                });
}


PART III




var songs = [{
	

	

	 name: "Smooth",
	

	 artist: "Santana featuring Rob Thomas",
	

	 year: 1999,
	

	 month: 10,
	

	 day: 23,
	

	 weeksAtNumberOne: 12,
	

	 duration: "4:00"
	

	}, {...
	

forEach
1. Write a function called listNames which takes in an array of songs and console.logs the name of each one.
function listNames(arr){
        arr.forEach(function(obj){
                        console.log(obj.name);
                });
}
1. Write a function called listSongDetails which takes in an array of songs and console.logs details about each one. The details should be in the following example format: "Smooth, by Santana featuring Rob Thomas (4:00)".
function listSongDetails(arr){
        arr.forEach(function(obj){
                console.log( `${obj.name}, by ${obj.artist} (${obj.duration})` ); 
                });
}


1. Write a function called summerJamCount which takes in an array of songs and returns the number of songs which hit #1 on the charts in June, July, or August.
function summerJamCount(arr){
        var count = 0;
        arr.forEach(function(obj){
                if( obj.month === 6 || obj.month === 7 || obj.month === 8 ) count++;
                });
        return count;
}
map
1. Write a function called getDurations which takes in an array of songs and returns an array of each song's duration.
function getDuration(arr){
        return arr.map(function(obj){
                        return        obj.duration;
                });
}
1. Write a function called getDurationInSeconds which takes in an array of songs and returns an array of each song's duration in seconds.
function getDurationInSeconds(arr){
        return arr.map(function(obj){
                        return        +obj.duration[0]*60 + +obj.duration.slice(2);
                });
}


1. Write a function called getMainArtists which takes in an array of songs and returns an array of the primary artists on the recordings. If there's only one artist, that artist should be returned; if there are featured artists, they should be ignored (so only the artist to the left of "featuring" is kept.)
function getMainArtists(arr){
        function fn(obj){
                return obj.artist.split(" featuring ")[0];
        }
        return arr.map(fn);
}


filter
1. Write a function called getBigHits which takes an array of songs and returns an array of song objects which were number one for 10 or more weeks.
function getBigHits(arr){
        return arr.filter(function(obj){
                        return obj.weeksAtNumberOne >= 10;
                })
}


1. Write a function called getShortSongs which takes an array of songs and returns an array of songs which are shorter than 3 minutes.
function getShortSongs(arr){
        function fn(obj){
                return +obj.duration.split("")[0] < 3;
        }
        return arr.filter(fn);
}


1. Write a function called getSongsByArtist which takes in an array of songs and the name of an artist and returns an array of songs by that artist.
function getSongsByArtist(arr, name){
        function fn(obj){
                return obj.artist === name;
        }
        return arr.filter(fn);
}
reduce
1. Refactor summerJamCount to use reduce!


function summerJamCount(arr){
        return arr.reduce(function(acc,obj){
                        if( obj.month === 6 || obj.month === 7 || obj.month === 8 ) {
                                return ++acc;
                        }
                        return acc;
                },0);
}


1. Write a function called getTotalDurationInSeconds which takes in an array of songs and returns the total amount of time (in seconds) it would take to listen to all of the songs. (Hint: can you use anything you've written already to help solve this problem?)


function getTotalDurationInSeconds(arr){
        function sum(a,b){
                return a+b;
        }
        return getDurationInSeconds(arr).reduce(sum);
}


1. Write a function called getSongCountByArtist which takes in an array of songs and returns an object. The keys in the object should be artist names, and the values should be the number of songs by that artist in the original array.


function getSongCountByArtist(arr){
        function fn(acc,obj){
                if(!acc[obj.artist]) {
                        acc[obj.artist] = 1 
        } else {
                        acc[obj.artist]++
        }
                return acc; 
        }
        return arr.reduce(fn,{});
}


1. Write a function called averageWeeksAtNumberOne which takes in an array of songs and returns the average number of weeks that songs on the list were #1.


function averageWeeksAtNumberOne(arr){
        function sum(acc, obj){
                return acc + obj.weeksAtNumberOne;
        }
        return arr.reduce(sum,0) / arr.length;
}